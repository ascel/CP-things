int MAXN, n;
vector<int> segtree;

void build(vector<int> &arr, int idx = 0, int l = 0, int r = n - 1) {
    if(l == r) {
        segtree[idx] = arr[l];
        return;
    }
    int lc = (idx << 1) + 1;
    int rc = lc + 1;
    int mid = (l + r) / 2;
    build(arr, lc, l, mid);
    build(arr, rc, mid+1, r);
    segtree[idx] = segtree[lc] + segtree[rc];
}

void update(int a, int val, int idx = 0, int l = 0, int r = n - 1) {
    if (r < a || a < l) return;
    if (a == l && r == a) {
        segtree[idx] += val;
        return;
    }
    int lc = (idx << 1) + 1;
    int rc = lc + 1;
    int mid = (l + r) / 2;
    if(a <= mid) {
        update(a, val, lc, l, mid);
    }
    else {
        update(a, val, rc, mid+1, r);
    }
    segtree[idx] = segtree[lc] + segtree[rc];
}

int query(int a, int b, int idx = 0, int l = 0, int r = n - 1) {
    if (r < a || b < l) return 0;
    if (a <= l && r <= b) return segtree[idx];
    int lc = (idx << 1) + 1;
    int rc = lc + 1;
    int mid = (l + r) / 2;
    return query(a, b, lc, l, mid) + query(a, b, rc, mid+1, r);
}
