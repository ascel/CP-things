const int size = 1e5;

int n;
int arr[size], seg[size << 2];

void build(int idx = 0, int l = 0, int r = n - 1)
{
    if(l == r)
    {
        seg[idx] = arr[l];
        return;
    }
    int lc = (idx << 1) + 1, rc = lc + 1, m = l + ((r - l) >> 1);
    build(lc, l, m);
    build(rc, m + 1, r);
    seg[idx] = seg[lc] + seg[rc];
}

void update(int u, int v, int idx = 0, int l = 0, int r = n - 1)
{
    if(u < l || u > r)
    {
        return;
    }
    if(u == l && u == r)
    {
        seg[idx] += v;
        return;
    }
    int lc = (idx << 1) + 1, rc = lc + 1, m = l + ((r - l) >> 1);
    if(u <= m)
    {
        update(u, v, lc, l, m);
    }
    else
    {
        update(u, v, rc, m + 1, r);
    }
    seg[idx] = seg[lc] + seg[rc];
}

int query(int u, int v, int idx = 0, int l = 0, int r = n - 1)
{
    if(u > r || v < l)
    {
        return 0;
    }
    if(u <= l && v >= r)
    {
        return seg[idx];
    }
    int lc = (idx << 1) + 1, rc = lc + 1, m = l + ((r - l) >> 1);
    return query(u, v, lc, l, m) + query(u, v, rc, m + 1, r);
}
